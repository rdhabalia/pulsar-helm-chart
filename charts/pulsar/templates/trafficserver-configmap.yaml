#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.components.trafficserver }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.trafficserver.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.trafficserver.component }}
data:
  wrapper.sh: |
    #!/bin/bash
    set -euo pipefail
    cd /etc/trafficserver
    for f in /scripts/*.config /scripts/*.yaml ; do cp $f . ; done
    /scripts/update-sniyaml.py &
    /opt/trafficserver/bin/trafficserver start
    while /opt/trafficserver/bin/trafficserver status ; do sleep 20 ; done
  logging.yaml: |
    logging:
      formats:
        - name: "extended2"
          format: '%<chi> - %<caun> [%<cqtn>] "%<cqtx>" %<pssc> %<pscl> %<sssc> %<sscl> %<cqcl> %<pqcl> %<cqhl> %<pshl> %<pqhl> %<sshl> %<tts> %<phr> %<cfsc> %<pfsc> %<crc>'
      logs:
        - filename: access
          format: extended2
          mode: ascii
  sni.yaml: |
    sni:
  ssl_multicert.config: |
    ssl_cert_name={{ .Values.trafficserver.tlsCertificateName }} ssl_key_name={{ .Values.trafficserver.tlsKeyName }}
  records.config: |
    CONFIG proxy.config.exec_thread.autoconfig INT 1
    CONFIG proxy.config.exec_thread.autoconfig.scale FLOAT 1.0
    CONFIG proxy.config.exec_thread.limit INT 2
    CONFIG proxy.config.accept_threads INT 1
    CONFIG proxy.config.task_threads INT 2
    CONFIG proxy.config.cache.threads_per_disk INT 8
    CONFIG proxy.config.exec_thread.affinity INT 1
    CONFIG proxy.config.http.server_ports STRING {{ .Values.trafficserver.ports.proxy }}:ssl
    CONFIG proxy.config.http.connect_ports STRING {{ .Values.trafficserver.ports.proxy }}
    CONFIG proxy.config.http.insert_request_via_str INT 1
    CONFIG proxy.config.http.insert_response_via_str INT 0
    CONFIG proxy.config.http.parent_proxy.retry_time INT 300
    CONFIG proxy.config.http.parent_proxy.connect_attempts_timeout INT 30
    CONFIG proxy.config.http.forward.proxy_auth_to_parent INT 0
    CONFIG proxy.config.http.uncacheable_requests_bypass_parent INT 1
    CONFIG proxy.config.http.keep_alive_no_activity_timeout_in INT 120
    CONFIG proxy.config.http.keep_alive_no_activity_timeout_out INT 120
    CONFIG proxy.config.http.transaction_no_activity_timeout_in INT 30
    CONFIG proxy.config.http.transaction_no_activity_timeout_out INT 30
    CONFIG proxy.config.http.transaction_active_timeout_in INT 900
    CONFIG proxy.config.http.transaction_active_timeout_out INT 0
    CONFIG proxy.config.http.accept_no_activity_timeout INT 120
    CONFIG proxy.config.net.default_inactivity_timeout INT 86400
    CONFIG proxy.config.http.connect_attempts_max_retries INT 3
    CONFIG proxy.config.http.connect_attempts_max_retries_dead_server INT 1
    CONFIG proxy.config.http.connect_attempts_rr_retries INT 3
    CONFIG proxy.config.http.connect_attempts_timeout INT 30
    CONFIG proxy.config.http.post_connect_attempts_timeout INT 1800
    CONFIG proxy.config.http.down_server.cache_time INT 60
    CONFIG proxy.config.http.negative_caching_enabled INT 0
    CONFIG proxy.config.http.negative_caching_lifetime INT 1800
    CONFIG proxy.config.http.insert_client_ip INT 1
    CONFIG proxy.config.http.insert_squid_x_forwarded_for INT 1
    CONFIG proxy.config.http.push_method_enabled INT 0
    CONFIG proxy.config.http.cache.http INT 0
    CONFIG proxy.config.http.cache.ignore_client_cc_max_age INT 1
    CONFIG proxy.config.http.normalize_ae INT 1
    CONFIG proxy.config.http.cache.cache_responses_to_cookies INT 1
    CONFIG proxy.config.http.cache.cache_urls_that_look_dynamic INT 1
    CONFIG proxy.config.http.cache.when_to_revalidate INT 0
    CONFIG proxy.config.http.cache.required_headers INT 2
    CONFIG proxy.config.http.cache.heuristic_min_lifetime INT 3600
    CONFIG proxy.config.http.cache.heuristic_max_lifetime INT 86400
    CONFIG proxy.config.http.cache.heuristic_lm_factor FLOAT 0.10
    CONFIG proxy.config.net.connections_throttle INT 30000
    CONFIG proxy.config.net.max_connections_in INT 30000
    CONFIG proxy.config.net.max_requests_in INT 0
    CONFIG proxy.config.cache.ram_cache.size INT -1
    CONFIG proxy.config.cache.ram_cache_cutoff INT 4194304
    CONFIG proxy.config.cache.limits.http.max_alts INT 5
    CONFIG proxy.config.cache.max_doc_size INT 0
    CONFIG proxy.config.cache.min_average_object_size INT 8000
    CONFIG proxy.config.log.logging_enabled INT 3
    CONFIG proxy.config.log.max_space_mb_for_logs INT 25000
    CONFIG proxy.config.log.max_space_mb_headroom INT 1000
    CONFIG proxy.config.log.rolling_enabled INT 1
    CONFIG proxy.config.log.rolling_interval_sec INT 86400
    CONFIG proxy.config.log.rolling_size_mb INT 10
    CONFIG proxy.config.log.auto_delete_rolled_files INT 1
    CONFIG proxy.config.log.periodic_tasks_interval INT 5
    CONFIG proxy.config.url_remap.remap_required INT 1
    CONFIG proxy.config.url_remap.pristine_host_hdr INT 0
    CONFIG proxy.config.reverse_proxy.enabled INT 1
    CONFIG proxy.config.ssl.client.verify.server.policy STRING PERMISSIVE
    CONFIG proxy.config.ssl.client.verify.server.properties STRING ALL
    CONFIG proxy.config.ssl.client.CA.cert.path STRING {{ .Values.trafficserver.CACertPath }}
    CONFIG proxy.config.ssl.client.CA.cert.filename STRING {{ .Values.trafficserver.CACertFile }}
    CONFIG proxy.config.ssl.client.certification_level INT 2
    CONFIG proxy.config.ssl.CA.cert.path STRING {{ .Values.trafficserver.CACertPath }}
    CONFIG proxy.config.ssl.CA.cert.filename STRING ca.cert.pem
    CONFIG proxy.config.ssl.TLSv1 INT 0
    CONFIG proxy.config.ssl.TLSv1_1 INT 0
    CONFIG proxy.config.ssl.TLSv1_2 INT 1
    CONFIG proxy.config.ssl.TLSv1_3 INT 1
    CONFIG proxy.config.ssl.client.TLSv1 INT 0
    CONFIG proxy.config.ssl.client.TLSv1_1 INT 0
    CONFIG proxy.config.ssl.client.TLSv1_2 INT 1
    CONFIG proxy.config.ssl.client.TLSv1_3 INT 1
    CONFIG proxy.config.ssl.server.cipher_suite STRING AES128-GCM-SHA256:!DSS:!PSK:!aNULL:!eNULL:!SSLv2
    CONFIG proxy.config.ssl.server.TLSv1_3.cipher_suites STRING TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256
    CONFIG proxy.config.ssl.client.cipher_suite STRING ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA
    CONFIG proxy.config.ssl.client.TLSv1_3.cipher_suites STRING TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256
    CONFIG proxy.config.ssl.server.honor_cipher_order INT 1
    CONFIG proxy.config.ssl.server.multicert.exit_on_load_fail INT 1
    CONFIG proxy.config.ssl.server.cert.path STRING {{ .Values.trafficserver.tlsCertificatePath }}
    CONFIG proxy.config.ssl.server.private_key.path STRING {{ .Values.trafficserver.tlsKeyPath }}
    CONFIG proxy.config.diags.debug.enabled INT 0
    CONFIG proxy.config.diags.debug.tags STRING http|dns
    CONFIG proxy.config.dump_mem_info_frequency INT 0
    CONFIG proxy.config.http.slow.log.threshold INT 0
  update-sniyaml.py: |
    #!/usr/bin/python3
    # Fetches the list of broker pods and services for the cluster from Kubernetes REST API, updates sni.yaml, and gives trafficserver a reload signal if needed.
    # We are using the REST API to avoid installing more packages into the Docker image. This code is a pythonization of the example at https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/
    import os
    import json
    import urllib.request
    import time
    APISERVER="https://kubernetes.default.svc"
    SERVICEACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
    CACERT=f"{SERVICEACCOUNT}/ca.crt"
    while True:
        try:
            #print("fetching objects")
            NAMESPACE=open(f"{SERVICEACCOUNT}/namespace").read()
            TOKEN=open(f"{SERVICEACCOUNT}/token").read()
            pods_req = urllib.request.Request(f"{APISERVER}/api/v1/pods?labelSelector=component%3D{{ .Values.broker.component }}", headers={'Authorization': f"Bearer {TOKEN}"}, method='GET')
            pods_resp = urllib.request.urlopen(pods_req, cafile=CACERT)
            if pods_resp.getcode() != 200 or pods_resp.getheader('Content-Type') != 'application/json':
                raise RuntimeError(f"bad k8s API response to /api/v1/pods: httpcode:{pods_resp.getcode()} httpmsg:{pods_resp.msg}")
            pods_json = json.loads(pods_resp.read())
            pods = []
            for p in pods_json['items']:
                pods.append(f"{p['metadata']['name']}.{p['metadata']['ownerReferences'][0]['name']}.{p['metadata']['namespace']}.svc.{{ .Values.clusterDomain }}")
                pods.append(f"{p['metadata']['name']}.{p['metadata']['ownerReferences'][0]['name']}.{p['metadata']['namespace']}.{{ .Values.trafficserver.r53domain }}") # this is for the temporary regex which requires per-tenant wildcard SANS
                pods.append(f"{p['metadata']['name']}-{p['metadata']['namespace']}.{{ .Values.trafficserver.r53domain }}") # this is for the single wildcard SAN
            svcs_req = urllib.request.Request(f"{APISERVER}/api/v1/services?labelSelector=component%3D{{ .Values.broker.component }}", headers={'Authorization': f"Bearer {TOKEN}"}, method='GET')
            svcs_resp = urllib.request.urlopen(svcs_req, cafile=CACERT)
            if svcs_resp.getcode() != 200 or svcs_resp.getheader('Content-Type') != 'application/json':
                raise RuntimeError(f"bad k8s API response to /api/v1/services: httpcode:{svcs_resp.getcode()} httpmsg:{svcs_resp.msg}")
            svcs_json = json.loads(svcs_resp.read())
            svcs = []
            for s in svcs_json['items']:
                svcs.append(f"{s['metadata']['name']}.{s['metadata']['namespace']}.svc.{{ .Values.clusterDomain }}")
                svcs.append(f"{s['metadata']['name']}.{s['metadata']['namespace']}.{{ .Values.trafficserver.r53domain }}") # this is for the temporary regex which requires per-tenant wildcard SANS
                svcs.append(f"{s['metadata']['name']}-{s['metadata']['namespace']}.{{ .Values.trafficserver.r53domain }}") # this is for the single wildcard SAN
            with open('/var/tmp/sni.yaml', 'w') as conf:
                print('sni:', file=conf)
                {{- range .Values.trafficserver.sni_routes }}
                print(f"- fqdn: {{ .fqdn }}", file=conf)
                print(f"  tunnel_route: {{ .tunnel_route }}", file=conf)
                {{- end }}
                for n in sorted(pods+svcs):
                    print(f"- fqdn: {n}", file=conf)
                    print(f"  tunnel_route: {n}:{{ .Values.trafficserver.ports.pulsarssl }}", file=conf)
            if os.system('diff -q /etc/trafficserver/sni.yaml /var/tmp/sni.yaml') & 0xff00:
                #print("updating config")
                os.rename('/var/tmp/sni.yaml', '/etc/trafficserver/sni.yaml')
                os.system('/opt/trafficserver/bin/traffic_ctl config reload')
            else:
                pass
                #print("no update needed")
        except Exception as e:
            print(e)
        finally:
            #print("sleeping for 30")
            time.sleep(30)
{{- end }}

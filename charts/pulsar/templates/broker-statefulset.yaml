#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# add athenz n cameo changes

{{- if .Values.components.broker }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.broker.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
  replicas: {{ .Values.broker.replicaCount }}
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.broker.component }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.broker.component }}
      annotations:
        prometheus.io/scrape: "true"
        {{- if .Values.prometheus.https_scraper }}
        prometheus.io/scheme: "https"
        {{- end }}
        prometheus.io/port: "
        {{- if .Values.prometheus.https_scraper }}
          {{- .Values.broker.ports.https }}
        {{- else }}
          {{- .Values.broker.ports.http }}
        {{- end }}"
        {{- if .Values.broker.restartPodsOnConfigMapChange }}
        checksum/config: {{ include (print $.Template.BasePath "/broker-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.broker.alwaysRestart }}
        rollme: {{ randAlphaNum 5 | quote }}
        {{- end }}
{{- with .Values.broker.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      securityContext:
{{ toYaml .Values.pod.securityContext | indent 8 }}
    {{- if .Values.broker.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.broker.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.broker.tolerations }}
      tolerations:
{{ toYaml .Values.broker.tolerations | indent 8 }}
    {{- end }}
      topologySpreadConstraints:
        {{- if and .Values.affinity.zone_spread .Values.broker.affinity.zone_spread}}
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchExpressions:
            - key: "app"
              operator: In
              values:
              - "{{ template "pulsar.name" . }}"
            - key: "release"
              operator: In
              values:
              - {{ .Release.Name }}
            - key: "component"
              operator: In
              values:
              - {{ .Values.broker.component }}
        {{- end }}
      affinity:
        {{- if and .Values.affinity.anti_affinity .Values.broker.affinity.anti_affinity}}
        podAntiAffinity:
          {{ if eq .Values.broker.affinity.type "requiredDuringSchedulingIgnoredDuringExecution"}}
          {{ .Values.broker.affinity.type }}:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - "{{ template "pulsar.name" . }}"
              - key: "release"
                operator: In
                values:
                - {{ .Release.Name }}
              - key: "component"
                operator: In
                values:
                - {{ .Values.broker.component }}
            topologyKey: "kubernetes.io/hostname"
        {{ else }}
          {{ .Values.broker.affinity.type }}:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                      - "{{ template "pulsar.name" . }}"
                    - key: "release"
                      operator: In
                      values:
                      - {{ .Release.Name }}
                    - key: "component"
                      operator: In
                      values:
                      - {{ .Values.broker.component }}
                topologyKey: "kubernetes.io/hostname"
        {{ end }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.broker.gracePeriod }}
      serviceAccountName: "{{ .Values.broker.service_account.name }}"
      initContainers:
      {{- include "pulsar.init-sia" . | nindent 6 }}
      {{$data := dict "service_account" .Values.broker.service_account.name }}
      {{- include "pulsar.init-cameo" (merge (dict "Args" $data) . ) | nindent 6 }}
      ## zk keystore generation init container
      - name: init-zkcertgen
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        env:
          - name: ATHENZ_SERVICE_CERT_PATH
            value: {{ .Values.athenz.certs.path }}/{{ .Values.athenz.domain }}.{{ .Values.broker.service_account.name }}.cert.pem
          - name: ATHENZ_SERVICE_KEY_PATH
            value: {{ .Values.athenz.certs.key }}/{{ .Values.athenz.domain }}.{{ .Values.broker.service_account.name }}.key.pem
        command: ["sh", "-c"]
        args:
          - >
            echo "jks cert script started";
            bin/jks-cert-generator.sh {{ .Values.athenz.domain }}.{{ .Values.broker.service_account.name }}.key.pem {{ .Values.athenz.domain }}.{{ .Values.broker.service_account.name }}.cert.pem;
            echo "zookeeper configurations";
            cat conf/zookeeper.conf;
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 10 }}
      # This init container will wait for zookeeper to be ready before
      - name: wait-zookeeper-ready
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >-
            export OPTS="$OPTS {{ .Values.broker.configData.zkClientJvmArgs }}";
            {{- include "pulsar.broker.zookeeper.tls.settings" . | nindent 12 }}
            {{- if .Values.pulsar_metadata.configurationStore }}
            until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ template "pulsar.configurationStore.connect" . }} get {{ .Values.configurationStoreMetadataPrefix }}/admin/clusters/{{ template "pulsar.cluster.name" . }}; do
            {{- end }}
            {{- if not .Values.pulsar_metadata.configurationStore }}
            until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ template "pulsar.zookeeper.connect" . }} get {{ .Values.metadataPrefix }}/admin/clusters/{{ template "pulsar.cluster.name" . }}; do
            {{- end }}
              echo "pulsar cluster {{ template "pulsar.cluster.name" . }} isn't initialized yet ... check in 3 seconds ..." && sleep 3;
            done;
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 10 }}
      # This init container will wait for bookkeeper to be ready before
      # deploying the broker
      - name: wait-bookkeeper-ready
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >
            export OPTS="$OPTS {{ .Values.broker.configData.zkClientJvmArgs }}";
            {{- include "pulsar.broker.zookeeper.tls.settings" . | nindent 12 }}
            bin/apply-config-from-env.py conf/bookkeeper.conf;
            echo
            cat conf/bookkeeper.conf;
            until bin/bookkeeper shell whatisinstanceid; do
              echo "bookkeeper cluster is not initialized yet. backoff for 3 seconds ...";
              sleep 3;
            done;
            echo "bookkeeper cluster is already initialized";
            bookieServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }} | grep Name | wc -l)";
            until [ ${bookieServiceNumber} -ge {{ .Values.broker.configData.managedLedgerDefaultEnsembleSize }} ]; do
              echo "bookkeeper cluster {{ template "pulsar.cluster.name" . }} isn't ready yet ... check in 10 seconds ...";
              sleep 10;
              bookieServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }} | grep Name | wc -l)";
            done;
            echo "bookkeeper cluster is ready";
        envFrom:
          - configMapRef:
              name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}"
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 10 }}
      containers:
      {{- include "pulsar.sia" . | nindent 6 }}
      {{$data := dict "service_account" .Values.broker.service_account.name }}
      {{- include "pulsar.cameo" (merge (dict "Args" $data) . ) | nindent 6 }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        {{- if .Values.broker.probe.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.broker.ports.http }}
          initialDelaySeconds: {{ .Values.broker.probe.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.broker.probe.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.broker.probe.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.broker.probe.liveness.failureThreshold }}
        {{- end }}
        {{- if .Values.broker.probe.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.broker.ports.http }}
          initialDelaySeconds: {{ .Values.broker.probe.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.broker.probe.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.broker.probe.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.broker.probe.readiness.failureThreshold }}
        {{- end }}
        {{- if .Values.broker.probe.startup.enabled }}
        startupProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.broker.ports.http }}
          initialDelaySeconds: {{ .Values.broker.probe.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.broker.probe.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.broker.probe.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.broker.probe.startup.failureThreshold }}
        {{- end }}
      {{- if .Values.broker.resources }}
        resources:
{{ toYaml .Values.broker.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
        - >
        {{- if .Values.broker.additionalCommand }}
          {{ .Values.broker.additionalCommand }}
        {{- end }}
          bin/apply-config-from-env.py conf/broker.conf;
        {{- if .Values.broker.configData.dynamicConfig }}
          echo "Applying dynamic config";
          bin/apply-config-from-values.py {{ .Values.broker.configData.dynamicConfig | quote }} conf/broker.conf;
        {{- end }}
        {{- if .Values.trafficserver.r53domain }}
          bin/apply-broker-advertisedaddress.sh conf/broker.conf {{ .Values.trafficserver.r53domain }} ;
        {{- end }}
          cat conf/broker.conf;
          bin/apply-config-from-env.py conf/client.conf;
          bin/gen-yml-from-env.py conf/functions_worker.yml;
          echo "OK" > status;
          {{- include "pulsar.broker.zookeeper.tls.settings" . | nindent 10 }}
          export OPTS="$OPTS {{ .Values.broker.configData.zkClientJvmArgs }}";
          bin/pulsar zookeeper-shell -server {{ template "pulsar.zookeeper.connect" . }} get {{ template "pulsar.broker.znode" . }};
          while [ $? -eq 0 ]; do
            echo "broker {{ template "pulsar.broker.hostname" . }} znode still exists ... check in 10 seconds ...";
            sleep 10;
            bin/pulsar zookeeper-shell -server {{ template "pulsar.zookeeper.connect" . }} get {{ template "pulsar.broker.znode" . }};
          done;
          cat conf/pulsar_env.sh; crond;
        {{- if .Values.broker.healthCheck.enabled }}
          echo "*/5 * * * *" /pulsar/bin/broker-healthcheck.sh | crontab -;
          echo "starting health-check service";
          echo "uvicorn healthcheck-metrics:app --host 0.0.0.0 --port {{ .Values.broker.ports.healthcheck }} --app-dir=/pulsar/bin &" >> /pulsar/bin/healthcheck-startup.sh;
          bash /pulsar/bin/healthcheck-startup.sh;
          echo "health-check service started";
        {{- end }}
        {{- if .Values.broker.zktls.enabled }}
          echo "setting up jks cert gen script as cron with key " {{ .Values.athenz.domain }}.{{ .Values.broker.service_account.name }}.key.pem;
          (crontab -l; echo "2 1 * * *" /pulsar/bin/jks-cert-generator.sh {{ .Values.athenz.domain }}.{{ .Values.broker.service_account.name }}.key.pem  {{ .Values.athenz.domain }}.{{ .Values.broker.service_account.name }}.cert.pem) | sort -u | crontab -;
        {{- end}}
          OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar broker;
        ports:
        # prometheus needs to access /metrics endpoint
        - name: http
          containerPort: {{ .Values.broker.ports.http }}
        {{- if or (not .Values.tls.enabled) (not .Values.tls.broker.enabled) }}
        - name: "{{ .Values.tcpPrefix }}pulsar"
          containerPort: {{ .Values.broker.ports.pulsar }}
        {{- end }}
        - name: health
          containerPort: {{ .Values.broker.ports.healthcheck }}
        {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
        - name: https
          containerPort: {{ .Values.broker.ports.https }}
        - name: "{{ .Values.tlsPrefix }}pulsarssl"
          containerPort: {{ .Values.broker.ports.pulsarssl }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 12 }}
            - name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}-{{ .Values.broker.volumes.logs.name }}"
              mountPath: {{ .Values.broker.volumes.logs.mountPath }}
              subPathExpr: $(POD_NAME)
          {{- if .Values.broker.healthCheck.enabled }}
            - mountPath: /metrics-data
              name: metrics-volume
          {{- end }}
          {{- if .Values.broker.extraVolumeMounts }}
{{ toYaml .Values.broker.extraVolumeMounts | indent 10 }}
          {{- end }}
          {{- include "pulsar.broker.certs.volumeMounts" . | nindent 10 }}
      volumes:
      {{$data := dict "service_account_configmap" .Values.broker.service_account.configmap }}
      {{- include "pulsar.sia-volumes" (merge (dict "Args" $data) . ) | nindent 6 }}
      {{ if not .Values.broker.volumes.logs2ebs }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}-{{ .Values.broker.volumes.logs.name }}"
        hostPath:
          path: {{ .Values.broker.volumes.logs.mountPath }}
          type: {{ .Values.broker.volumes.logs.type }}
      {{ end }}
      {{- if .Values.broker.extraVolumes }}
{{ toYaml .Values.broker.extraVolumes | indent 6 }}
      {{- end }}
      {{- if .Values.broker.healthCheck.enabled }}
      - name: metrics-volume
        emptyDir: {}
      {{- end }}
      {{- include "pulsar.broker.certs.volumes" . | nindent 6 }}
      {{- include "pulsar.imagePullSecrets" . | nindent 6}}
  {{ if .Values.broker.volumes.logs2ebs }}
  volumeClaimTemplates:
  - metadata:
      name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}-{{ .Values.broker.volumes.logs.name }}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.broker.volumes.logs.size }}
    {{- if .Values.broker.volumes.logs.storageClassName }}
      storageClassName: "{{ .Values.broker.volumes.logs.storageClassName }}"
    {{- else if and (not (and .Values.volumes.local_storage .Values.broker.volumes.logs.local_storage)) .Values.broker.volumes.logs.storageClass }}
      storageClassName: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}-{{ .Values.broker.volumes.logs.name }}"
    {{- else if and .Values.volumes.local_storage .Values.broker.volumes.logs.local_storage }}
      storageClassName: "local-storage"
    {{- end }}
  {{ end }}
{{- end }}

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if or .Values.components.autorecovery .Values.extra.autoRecovery }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.autorecovery.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.autorecovery.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.autorecovery.component }}"
  replicas: {{ .Values.autorecovery.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  # nodeSelector:
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.autorecovery.component }}
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.autorecovery.component }}
      annotations:
        prometheus.io/scrape: "true"
        {{- if .Values.prometheus.https_scraper }}
        prometheus.io/scheme: "https"
        {{- end }}
        prometheus.io/port: "
        {{- if .Values.prometheus.https_scraper }}
          {{- .Values.autorecovery.ports.https }}
        {{- else }}
          {{- .Values.autorecovery.ports.http }}
        {{- end }}"
        {{- if .Values.autorecovery.restartPodsOnConfigMapChange }}
        checksum/config: {{ include (print $.Template.BasePath "/autorecovery-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.autorecovery.alwaysRestart }}
        rollme: {{ randAlphaNum 5 | quote }}
        {{- end }}
{{- with .Values.autorecovery.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      securityContext:
{{ toYaml .Values.pod.securityContext | indent 8 }}
    {{- if .Values.autorecovery.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.autorecovery.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.autorecovery.tolerations }}
      tolerations:
{{- with .Values.autorecovery.tolerations }}
{{ toYaml . | indent 8 }}
{{- end }}
    {{- end }}
      topologySpreadConstraints:
        {{- if and .Values.affinity.zone_spread .Values.autorecovery.affinity.zone_spread}}
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchExpressions:
            - key: "app"
              operator: In
              values:
              - "{{ template "pulsar.name" . }}"
            - key: "release"
              operator: In
              values:
              - {{ .Release.Name }}
            - key: "component"
              operator: In
              values:
              - {{ .Values.autorecovery.component }}
        {{- end }}
      affinity:
        {{- if and .Values.affinity.anti_affinity .Values.autorecovery.affinity.anti_affinity}}
        podAntiAffinity:
          {{ if eq .Values.autorecovery.affinity.type "requiredDuringSchedulingIgnoredDuringExecution"}}
          {{ .Values.autorecovery.affinity.type }}:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - "{{ template "pulsar.name" . }}"
              - key: "release"
                operator: In
                values:
                - {{ .Release.Name }}
              - key: "component"
                operator: In
                values:
                - {{ .Values.autorecovery.component }}
            topologyKey: "kubernetes.io/hostname"
          {{ else }}
          {{ .Values.autorecovery.affinity.type }}:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                      - "{{ template "pulsar.name" . }}"
                    - key: "release"
                      operator: In
                      values:
                      - {{ .Release.Name }}
                    - key: "component"
                      operator: In
                      values:
                      - {{ .Values.autorecovery.component }}
                topologyKey: "kubernetes.io/hostname"
          {{ end }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.autorecovery.gracePeriod }}
      serviceAccountName: "{{ .Values.autorecovery.service_account.name }}"
      initContainers:
      {{- include "pulsar.init-sia" . | nindent 6 }}
      {{$data := dict "service_account" .Values.autorecovery.service_account.name }}
      {{- include "pulsar.init-cameo" (merge (dict "Args" $data) . ) | nindent 6 }}
      ## initialize jks cert generation for autorecovery zk client usage
      - name: init-zkcertgen
        image: "{{ .Values.images.autorecovery.repository }}:{{ .Values.images.autorecovery.tag }}"
        imagePullPolicy: {{ .Values.images.autorecovery.pullPolicy }}
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        env:
          - name: ATHENZ_SERVICE_CERT_PATH
            value: {{ .Values.athenz.certs.path }}/{{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.cert.pem
          - name: ATHENZ_SERVICE_KEY_PATH
            value: {{ .Values.athenz.certs.key }}/{{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.key.pem
        command: ["sh", "-c"]
        args:
          - >
            echo "jks cert script started";
            bin/jks-cert-generator.sh {{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.key.pem {{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.cert.pem;
            echo "zookeeper configurations";
            cat conf/zookeeper.conf;
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 10 }}
      # This initContainer will wait for bookkeeper initnewcluster to complete
      # before deploying the bookies
      - name: pulsar-bookkeeper-verify-clusterid
        image: "{{ .Values.images.autorecovery.repository }}:{{ .Values.images.autorecovery.tag }}"
        imagePullPolicy: {{ .Values.images.autorecovery.pullPolicy }}
        command: ["sh", "-c"]
        args:
        - >
          export OPTS="$OPTS {{ .Values.autorecovery.configData.zkClientJvmArgs }}";
          {{- include "pulsar.autorecovery.init.verify_cluster_id" . | nindent 10 }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.autorecovery.component }}"
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 10 }}
      containers:
      {{- include "pulsar.sia" . | nindent 6 }}
      {{$data := dict "service_account" .Values.autorecovery.service_account.name }}
      {{- include "pulsar.cameo" (merge (dict "Args" $data) . ) | nindent 6 }}
      {{ if .Values.prometheus.https_scraper }}
      - name: stunnel
        image: "{{ .Values.images.stunnel.repository }}:{{ .Values.images.stunnel.tag }}"
        imagePullPolicy: {{ .Values.images.stunnel.pullPolicy }}
        args: ["{{ .Values.autorecovery.ports.https }}", "{{ .Values.autorecovery.ports.http }}", "{{ .Values.athenz.certs.path }}/{{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.cert.pem", "{{ .Values.athenz.certs.key }}/{{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.key.pem", "{{ .Values.athenz.certs.path }}/ca.cert.pem"]
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        ports:
        # prometheus needs to access /metrics endpoint
        - name: https
          containerPort: {{ .Values.autorecovery.ports.https }}
        resources:
          requests:
            memory: 50M
            cpu: 10m
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 10 }}
      {{ end }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.autorecovery.component }}"
        image: "{{ .Values.images.autorecovery.repository }}:{{ .Values.images.autorecovery.tag }}"
        imagePullPolicy: {{ .Values.images.autorecovery.pullPolicy }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
      {{- if .Values.autorecovery.resources }}
        resources:
{{ toYaml .Values.autorecovery.resources | indent 10 }}
      {{- end }}
        securityContext:
{{ toYaml .Values.container.securityContext | indent 10 }}
        command: ["sh", "-c"]
        args:
        - >
          export OPTS="$OPTS {{ .Values.autorecovery.configData.zkClientJvmArgs }}";
          bin/apply-config-from-env.py conf/bookkeeper.conf; crond;
          {{- include "pulsar.autorecovery.zookeeper.tls.settings" . | nindent 10 }}
          {{ if .Values.autorecovery.healthCheck.enabled }}
          echo "*/5 * * * *" /pulsar/bin/bookkeeper-healthcheck.sh '"{{ .Values.bookkeeper.configData.zkClientJvmArgs }}"' | crontab -;
          {{ end }}
          {{ if .Values.autorecovery.zktls.enabled }}
          echo "setting up jks cert gen script as cron with key " {{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.key.pem;
          (crontab -l; echo "2 1 * * *" /pulsar/bin/jks-cert-generator.sh {{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.key.pem  {{ .Values.athenz.domain }}.{{ .Values.autorecovery.service_account.name }}.cert.pem) | sort -u | crontab -;
          {{ end }}
          OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/bookkeeper autorecovery
        ports:
        - name: http
          containerPort: {{ .Values.autorecovery.ports.http }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.autorecovery.component }}"
        volumeMounts:
{{ toYaml .Values.athenz.volumeMounts | indent 10 }}
          - name: "{{ template "pulsar.fullname" . }}-{{ .Values.autorecovery.component }}-{{ .Values.autorecovery.volumes.logs.name }}"
            mountPath: {{ .Values.autorecovery.volumes.logs.mountPath }}
            subPathExpr: $(POD_NAME)
        {{- include "pulsar.autorecovery.certs.volumeMounts" . | nindent 8 }}
        {{ if .Values.autorecovery.healthCheck.enabled }}
          - mountPath: /metrics-data
            name: metrics-volume
        {{ end }}
      volumes:
      {{$data := dict "service_account_configmap" .Values.autorecovery.service_account.configmap }}
      {{- include "pulsar.sia-volumes" (merge (dict "Args" $data) . ) | nindent 6 }}
      {{ if not .Values.autorecovery.volumes.logs2ebs }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.autorecovery.component }}-{{ .Values.autorecovery.volumes.logs.name }}"
        hostPath:
          path: {{ .Values.autorecovery.volumes.logs.mountPath }}
          type: {{ .Values.autorecovery.volumes.logs.type }}
      {{ end }}
      {{- include "pulsar.autorecovery.certs.volumes" . | nindent 6 }}
      {{- include "pulsar.imagePullSecrets" . | nindent 6}}
      {{ if .Values.autorecovery.healthCheck.enabled }}
      - name: metrics-volume
        emptyDir: {}
      {{ end }}
{{- end }}


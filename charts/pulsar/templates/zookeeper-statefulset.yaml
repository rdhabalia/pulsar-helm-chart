#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# add athenz n cameo changes
# deploy zookeeper only when `components.zookeeper` is true
{{- if .Values.components.zookeeper }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.zookeeper.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
  replicas: {{ .Values.zookeeper.replicaCount }}
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.zookeeper.component }}
  updateStrategy:
{{ toYaml .Values.zookeeper.updateStrategy | indent 4 }}
  podManagementPolicy: {{ .Values.zookeeper.podManagementPolicy }}
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.zookeeper.component }}
      annotations:
        prometheus.io/scrape: "true"
        {{- if .Values.prometheus.https_scraper }}
        prometheus.io/scheme: "https"
        {{- end }}
        prometheus.io/port: "
        {{- if .Values.prometheus.https_scraper }}
          {{- .Values.zookeeper.ports.https }}
        {{- else }}
          {{- .Values.zookeeper.ports.http }}
        {{- end }}"
        {{- if .Values.zookeeper.restartPodsOnConfigMapChange }}
        checksum/config: {{ include (print $.Template.BasePath "/zookeeper-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.zookeeper.alwaysRestart }}
        rollme: {{ randAlphaNum 5 | quote }}
        {{- end }}
{{- with .Values.zookeeper.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
    {{- if .Values.zookeeper.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.zookeeper.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.zookeeper.tolerations }}
      tolerations:
{{ toYaml .Values.zookeeper.tolerations | indent 8 }}
    {{- end }}
      topologySpreadConstraints:
        {{- if and .Values.affinity.zone_spread .Values.zookeeper.affinity.zone_spread}}
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchExpressions:
            - key: "app"
              operator: In
              values:
              - "{{ template "pulsar.name" . }}"
            - key: "release"
              operator: In
              values:
              - {{ .Release.Name }}
            - key: "component"
              operator: In
              values:
              - {{ .Values.zookeeper.component }}
        {{- end }}
      affinity:
        {{- if and .Values.affinity.anti_affinity .Values.zookeeper.affinity.anti_affinity}}
        podAntiAffinity:
          {{ if eq .Values.zookeeper.affinity.type "requiredDuringSchedulingIgnoredDuringExecution"}}
          {{ .Values.zookeeper.affinity.type }}:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - "{{ template "pulsar.name" . }}"
              - key: "release"
                operator: In
                values:
                - {{ .Release.Name }}
              - key: "component"
                operator: In
                values:
                - {{ .Values.zookeeper.component }}
            topologyKey: "kubernetes.io/hostname"
        {{ else }}
          {{ .Values.zookeeper.affinity.type }}:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                      - "{{ template "pulsar.name" . }}"
                    - key: "release"
                      operator: In
                      values:
                      - {{ .Release.Name }}
                    - key: "component"
                      operator: In
                      values:
                      - {{ .Values.zookeeper.component }}
                topologyKey: "kubernetes.io/hostname"
        {{ end }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.zookeeper.gracePeriod }}
      {{ if .Values.auth.authentication.enabled }}
      {{ if eq .Values.auth.authentication.provider "athenz" }}
      serviceAccountName: "{{ .Values.zookeeper.service_account.name }}"
      {{ end }}
      {{ else }}
      serviceAccountName: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
      {{ end }}
      initContainers:
      {{ if .Values.auth.authentication.enabled }}
      {{ if eq .Values.auth.authentication.provider "athenz" }}
      ## sia init container
      - name: init-sia
        image: "{{ .Values.images.sia.repository }}/{{ .Values.images.sia.tag }}"
        imagePullPolicy: {{ .Values.images.sia.pullPolicy }}
        command: ['sh', '-c', "while :; do /usr/sbin/siad -regionalsts -cmd post && break; done"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
        resources:
          requests:
            memory: 50M
            cpu: 10m
        volumeMounts:
          - name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
            mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
          - name: {{ .Values.auth.authentication.athenz.certs.sia_config.name }}
            mountPath: {{ .Values.auth.authentication.athenz.certs.sia_config.path }}
            subPath: {{ .Values.auth.authentication.athenz.certs.sia_config.sub_path }}
      {{ end }}
      {{ end }}
      containers:
      {{ if .Values.auth.authentication.enabled }}
      {{ if eq .Values.auth.authentication.provider "athenz" }}
      - name: sia
        image: "{{ .Values.images.sia.repository }}/{{ .Values.images.sia.tag }}"
        imagePullPolicy: {{ .Values.images.sia.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
        resources:
          requests:
            memory: 50M
            cpu: 10m
        volumeMounts:
          - mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
            name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
          - mountPath: {{ .Values.auth.authentication.athenz.certs.tls_certs.path }}
            name: {{ .Values.auth.authentication.athenz.certs.tls_certs.name }}
          - name: {{ .Values.auth.authentication.athenz.certs.sia_config.name }}
            mountPath: {{ .Values.auth.authentication.athenz.certs.sia_config.path }}
            subPath: {{ .Values.auth.authentication.athenz.certs.sia_config.sub_path }}
      {{ end }}
      {{ end }}
      {{ if .Values.prometheus.https_scraper }}
      - name: stunnel
        image: "{{ .Values.images.stunnel.repository }}:{{ .Values.images.stunnel.tag }}"
        imagePullPolicy: {{ .Values.images.stunnel.pullPolicy }}
        args: ["{{ .Values.zookeeper.ports.https }}", "{{ .Values.zookeeper.ports.http }}", "{{ .Values.auth.authentication.athenz.certs.sia_volume.path }}/certs/{{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.zookeeper.service_account.name }}.cert.pem", "{{ .Values.auth.authentication.athenz.certs.sia_volume.path }}/keys/{{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.zookeeper.service_account.name }}.key.pem", "{{ .Values.auth.authentication.athenz.certs.sia_volume.path }}/certs/ca.cert.pem"]
        ports:
        # prometheus needs to access /metrics endpoint
        - name: https
          containerPort: {{ .Values.zookeeper.ports.https }}
        securityContext:
          runAsUser: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
        resources:
          requests:
            memory: 50M
            cpu: 10m
        volumeMounts:
          - mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
            name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
      {{ end }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
        image: "{{ .Values.images.zookeeper.repository }}:{{ .Values.images.zookeeper.tag }}"
        imagePullPolicy: {{ .Values.images.zookeeper.pullPolicy }}
      {{- if .Values.zookeeper.resources }}
        resources:
{{ toYaml .Values.zookeeper.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
        - >
        {{- if .Values.zookeeper.additionalCommand }}
          {{ .Values.zookeeper.additionalCommand }}
        {{- end }}
          bin/apply-config-from-env.py conf/zookeeper.conf;
          {{- include "pulsar.zookeeper.tls.settings" . | nindent 10 }}
          bin/generate-zookeeper-config.sh conf/zookeeper.conf;
          cat conf/zookeeper.conf; crond;
          {{ if .Values.zookeeper.healthCheck.enabled }}
          echo "*/5 * * * *" /pulsar/bin/zookeeper-healthcheck.sh | crontab -;
          {{ end }}
          OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar zookeeper;
        ports:
        # prometheus needs to access /metrics endpoint
        - name: http
          containerPort: {{ .Values.zookeeper.ports.http }}
        - name: client
          containerPort: {{ .Values.zookeeper.ports.client }}
        - name: follower
          containerPort: {{ .Values.zookeeper.ports.follower }}
        - name: leader-election
          containerPort: {{ .Values.zookeeper.ports.leaderElection }}
        {{- if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
        - name: client-tls
          containerPort: {{ .Values.zookeeper.ports.clientTls }}
        {{- end }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: ZOOKEEPER_SERVERS
        {{- if .Values.zookeeper.configData.ZOOKEEPER_SERVERS }}
            value: {{ .Values.zookeeper.configData.ZOOKEEPER_SERVERS }}
        {{- else }}
           {{- $global := . }}
            value: {{ range $i, $e := until (.Values.zookeeper.replicaCount | int) }}{{ if ne $i 0 }},{{ end }}{{ template "pulsar.fullname" $global }}-{{ $global.Values.zookeeper.component }}-{{ printf "%d" $i }}{{ end }}
        {{- end }}
          - name: EXTERNAL_PROVIDED_SERVERS
        {{- if .Values.zookeeper.configData.ZOOKEEPER_SERVERS }}
            value: "true"
        {{- else }}
            value: "false"
        {{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
        {{- $zkConnectCommand := "" -}}
        {{- if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
        {{- $zkConnectCommand = print "openssl s_client -quiet -crlf -connect localhost:" .Values.zookeeper.ports.clientTls " -cert /pulsar/certs/zookeeper/tls.crt -key /pulsar/certs/zookeeper/tls.key" -}}
        {{- else -}}
        {{- $zkConnectCommand = print "nc localhost " .Values.zookeeper.ports.client -}}

        {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
          {{- if and .Values.rbac.enabled .Values.rbac.psp }}
          readOnlyRootFilesystem: false
          {{- end}}
        {{- if .Values.zookeeper.probe.readiness.enabled }}
        readinessProbe:
          exec:
            command:
            - timeout
            - "{{ .Values.zookeeper.probe.readiness.timeoutSeconds }}"
            - bash
            - -c
            - 'echo ruok | {{ $zkConnectCommand }} | grep imok'
          initialDelaySeconds: {{ .Values.zookeeper.probe.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.zookeeper.probe.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.zookeeper.probe.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.zookeeper.probe.readiness.failureThreshold }}
        {{- end }}
        {{- if .Values.zookeeper.probe.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - timeout
            - "{{ .Values.zookeeper.probe.liveness.timeoutSeconds }}"
            - bash
            - -c
            - 'echo ruok | {{ $zkConnectCommand }} | grep imok'
          initialDelaySeconds: {{ .Values.zookeeper.probe.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.zookeeper.probe.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.zookeeper.probe.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.zookeeper.probe.liveness.failureThreshold }}
        {{- end }}
        {{- if .Values.zookeeper.probe.startup.enabled }}
        startupProbe:
          exec:
            command:
            - timeout
            - "{{ .Values.zookeeper.probe.startup.timeoutSeconds }}"
            - bash
            - -c
            - 'echo ruok | {{ $zkConnectCommand }} | grep imok'
          initialDelaySeconds: {{ .Values.zookeeper.probe.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.zookeeper.probe.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.zookeeper.probe.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.zookeeper.probe.startup.failureThreshold }}
        {{- end }}
        volumeMounts:
        {{ if .Values.auth.authentication.enabled }}
        {{ if eq .Values.auth.authentication.provider "athenz" }}
        - mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
          name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
        {{ end }}
        {{ end }}
        - name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
          mountPath: /pulsar/data
        - name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.logs.name }}"
          mountPath: {{ .Values.zookeeper.volumes.logs.mountPath }}
          subPathExpr: $(POD_NAME)
        {{- if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
        - mountPath: "/pulsar/certs/zookeeper"
          name: zookeeper-certs
          readOnly: true
        - mountPath: "/pulsar/certs/ca"
          name: ca
          readOnly: true
        - name: keytool
          mountPath: "/pulsar/keytool/keytool.sh"
          subPath: keytool.sh
        {{- end }}
        {{ if .Values.zookeeper.healthCheck.enabled }}
        - mountPath: /metrics-data
          name: metrics-volume
        {{ end }}
        {{- if .Values.zookeeper.extraVolumeMounts }}
{{ toYaml .Values.zookeeper.extraVolumeMounts | indent 8 }}
        {{- end }}
      volumes:
      {{ if .Values.auth.authentication.enabled }}
      {{ if eq .Values.auth.authentication.provider "athenz" }}
      - name: tls-certs
        emptyDir:
          medium: {{ .Values.auth.authentication.athenz.certs.tls_certs.medium }}
      - name: sia-volume
        emptyDir:
          medium: {{ .Values.auth.authentication.athenz.certs.sia_volume.medium }}
      - name: sia
        configMap:
          name: "{{ .Values.zookeeper.service_account.configmap }}"
          items:
            - key: {{ .Values.auth.authentication.athenz.certs.sia_config.key.name }}
              path: {{ .Values.auth.authentication.athenz.certs.sia_config.key.path }}
      {{ end }}
      {{ end }}
      {{- if not (and (and .Values.volumes.persistence .Values.volumes.persistence) .Values.zookeeper.volumes.persistence) }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
        emptyDir: {}
      {{- end }}
      {{ if not .Values.zookeeper.volumes.logs2ebs }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.logs.name }}"
        hostPath:
          path: {{ .Values.zookeeper.volumes.logs.mountPath }}
          type: {{ .Values.zookeeper.volumes.logs.type }}
      {{ end }}
      {{ if .Values.zookeeper.healthCheck.enabled }}
      - name: metrics-volume
        emptyDir: {}
      {{ end }}
      {{- if .Values.zookeeper.extraVolumes }}
{{ toYaml .Values.zookeeper.extraVolumes | indent 6 }}
      {{- end }}
      {{- if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
      - name: zookeeper-certs
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.tls.zookeeper.cert_name }}"
          items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
      - name: ca
        secret:
          secretName: "{{ .Release.Name }}-{{ .Values.tls.ca_suffix }}"
          items:
            - key: ca.crt
              path: ca.crt
      - name: keytool
        configMap:
          name: "{{ template "pulsar.fullname" . }}-keytool-configmap"
          defaultMode: 0755
      {{- end}}
{{- if and (and .Values.persistence .Values.volumes.persistence) .Values.zookeeper.volumes.persistence }}
  volumeClaimTemplates:
  {{ if .Values.zookeeper.volumes.logs2ebs }}
  - metadata:
      name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.logs.name }}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.zookeeper.volumes.logs.size }}
    {{- if .Values.zookeeper.volumes.logs.storageClassName }}
      storageClassName: "{{ .Values.zookeeper.volumes.logs.storageClassName }}"
    {{- else if and (not (and .Values.volumes.local_storage .Values.zookeeper.volumes.logs.local_storage)) .Values.zookeeper.volumes.data.storageClass }}
      storageClassName: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.logs.name }}"
    {{- else if and .Values.volumes.local_storage .Values.zookeeper.volumes.logs.local_storage }}
      storageClassName: "local-storage"
    {{- end }}
  {{ end }}
  - metadata:
      name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.zookeeper.volumes.data.size }}
    {{- if .Values.zookeeper.volumes.data.storageClassName }}
      storageClassName: "{{ .Values.zookeeper.volumes.data.storageClassName }}"
    {{- else if and (not (and .Values.volumes.local_storage .Values.zookeeper.volumes.data.local_storage)) .Values.zookeeper.volumes.data.storageClass }}
      storageClassName: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
    {{- else if and .Values.volumes.local_storage .Values.zookeeper.volumes.data.local_storage }}
      storageClassName: "local-storage"
    {{- end }}
{{- end }}
{{- end }}

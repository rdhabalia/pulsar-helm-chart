#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
{{- if or .Release.IsInstall .Values.initialize }}
{{- if .Values.components.bookkeeper }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}-init"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: "{{ .Values.bookkeeper.component }}-init"
spec:
# This feature was previously behind a feature gate for several Kubernetes versions and will default to true in 1.23 and beyond
# https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
{{- if .Values.job.ttl.enabled }}
  ttlSecondsAfterFinished: {{ .Values.job.ttl.secondsAfterFinished }}
{{- end }}
  template:
    spec:
      {{ if .Values.auth.authentication.enabled }}
      {{ if eq .Values.auth.authentication.provider "athenz" }}
      serviceAccountName: "{{ .Values.bookkeeper.service_account.name }}"
      {{ end }}
      {{ else }}
      serviceAccountName: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}"
      {{ end }}
      initContainers:
      {{ if .Values.auth.authentication.enabled }}
      {{ if eq .Values.auth.authentication.provider "athenz" }}
      ## sia init container
      - name: init-sia
        image: "{{ .Values.images.sia.repository }}/{{ .Values.images.sia.tag }}"
        imagePullPolicy: {{ .Values.images.sia.pullPolicy }}
        command: ['sh', '-c', "while :; do /usr/sbin/siad -regionalsts -cmd post && break; done"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
        resources:
          requests:
            memory: 50M
            cpu: 10m
        volumeMounts:
          - name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
            mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
          - name: {{ .Values.auth.authentication.athenz.certs.sia_config.name }}
            mountPath: {{ .Values.auth.authentication.athenz.certs.sia_config.path }}
            subPath: {{ .Values.auth.authentication.athenz.certs.sia_config.sub_path }}
      ## cameo init container
      - name: init-cameo
        image: "{{ .Values.images.cameo.repository }}/{{ .Values.images.cameo.tag }}"
        imagePullPolicy: {{ .Values.images.cameo.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
        env:
          - name: ATHENZ_SERVICE_CERT_PATH
            value: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}/certs/{{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.bookkeeper.service_account.name }}.cert.pem
          - name: ATHENZ_SERVICE_KEY_PATH
            value: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}/keys/{{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.bookkeeper.service_account.name }}.key.pem
          - name: CERT_GROUP
            value: {{ .Values.auth.authentication.athenz.certs.cameo.cert.group }}
          - name: CERT_KEY
            value: {{ .Values.auth.authentication.athenz.certs.cameo.cert.key }}
          - name: PRIVATEKEY_KEY
            value: {{ .Values.auth.authentication.athenz.certs.cameo.cert.private_key }}
          - name: INIT_RUN
            value: "true"
        resources:
          requests:
            memory: "128M"
            cpu: "250m"
          limits:
            memory: "150M"
            cpu: "500m"
        volumeMounts:
          - mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
            name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
          - mountPath: {{ .Values.auth.authentication.athenz.certs.tls_certs.path }}
            name: {{ .Values.auth.authentication.athenz.certs.tls_certs.name }}
      {{ end }}
      {{ end }}
      ## zk keystore generation init container
      - name: init-zkcertgen
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
        env:
          - name: ATHENZ_SERVICE_CERT_PATH
            value: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}/certs/{{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.bookkeeper.service_account.name }}.cert.pem
          - name: ATHENZ_SERVICE_KEY_PATH
            value: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}/keys/{{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.bookkeeper.service_account.name }}.key.pem
          - name: INIT_RUN
            value:
        command: ["sh", "-c"]
        args:
          - >
            echo "jks cert script started";
            bin/jks-cert-generator.sh {{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.bookkeeper.service_account.name }}.key.pem {{ .Values.auth.authentication.athenz.certs.domain }}.{{ .Values.bookkeeper.service_account.name }}.cert.pem;
            echo "zookeeper configurations";
            cat conf/zookeeper.conf;
        volumeMounts:
          - mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
            name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
          - mountPath: {{ .Values.auth.authentication.athenz.certs.tls_certs.path }}
            name: {{ .Values.auth.authentication.athenz.certs.tls_certs.name }}

      - name: wait-zookeeper-ready
        image: "{{ .Values.images.bookie.repository }}:{{ .Values.images.bookie.tag }}"
        imagePullPolicy: {{ .Values.images.bookie.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >-
            {{- if $zk:=.Values.pulsar_metadata.userProvidedZookeepers }}
            until bin/pulsar zookeeper-shell -server {{ $zk }} ls {{ or .Values.metadataPrefix "/" }}; do
              echo "user provided zookeepers {{ $zk }} are unreachable... check in 3 seconds ..." && sleep 3;
            done;
            {{ else }}
            until nslookup {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ add (.Values.zookeeper.replicaCount | int) -1 }}.{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}.{{ template "pulsar.namespace" . }}; do
              sleep 3;
            done;
            {{- end}}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}-init"
        image: "{{ .Values.images.bookie.repository }}:{{ .Values.images.bookie.tag }}"
        imagePullPolicy: {{ .Values.images.bookie.pullPolicy }}
      {{- if .Values.bookkeeper.metadata.resources }}
        resources:
{{ toYaml .Values.bookkeeper.metadata.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
          - >
            export OPTS="$OPTS {{ .Values.bookkeeper.configData.zkClientJvmArgs }}";
            bin/apply-config-from-env.py conf/bookkeeper.conf;
            {{- include "pulsar.toolset.zookeeper.tls.settings" . | nindent 12 }}
            if bin/bookkeeper shell whatisinstanceid; then
                echo "bookkeeper cluster already initialized";
            else
                {{- if not (eq .Values.metadataPrefix "") }}
                bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }} create {{ .Values.metadataPrefix }} 'created for pulsar cluster "{{ template "pulsar.cluster.name" . }}"' || yes &&
                {{- end }}
                bin/bookkeeper shell initnewcluster;
            fi
            {{- if .Values.extraInitCommand }}
              {{ .Values.extraInitCommand }}
            {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
             - NET_RAW
        {{- if and .Values.rbac.enabled .Values.rbac.psp }}
          readOnlyRootFilesystem: false
        {{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}"
        volumeMounts:
          - mountPath: {{ .Values.auth.authentication.athenz.certs.sia_volume.path }}
            name: {{ .Values.auth.authentication.athenz.certs.sia_volume.name }}
          - mountPath: {{ .Values.auth.authentication.athenz.certs.tls_certs.path }}
            name: {{ .Values.auth.authentication.athenz.certs.tls_certs.name }}
      volumes:
      {{- include "pulsar.toolset.certs.volumes" . | nindent 6 }}
      restartPolicy: Never
{{- end }}
{{- end }}
